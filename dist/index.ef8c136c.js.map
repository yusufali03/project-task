{"mappings":"ACAA,MAAM,EAAe,2CAErB,eAAe,EAAa,CAAO,EACjC,IAAM,EAAW,MAAM,MACrB,CAAC,+CAA+C,EAAE,EAAa,CAAC,CAChE,CACE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CAAC,CACnB,KAAM,CAAC,EAAE,EAAQ,SAAS,CAAC,CAAC,EAAE,EAAQ,QAAQ,CAAC,CAAC,CAChD,MAAO,EAAQ,KAAK,CACpB,MAAO,EAAQ,KAAK,AACtB,EACF,GAGI,EAAO,MAAM,EAAS,IAAI,GAEhC,GAAI,EAAS,EAAE,CACb,OAAO,EAAK,IAAI,CAAC,EAAE,AAGnB,OADA,QAAQ,KAAK,CAAC,yBAA0B,GAClC,AAAI,MAAM,0BAEpB,CACA,eAAe,EAAmB,CAAO,EACvC,IAAM,EAAW,MAAM,MACrB,CAAC,qDAAqD,EAAE,EAAa,CAAC,CACtE,CACE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CAAC,CACnB,KAAM,EAAQ,OAAO,CACrB,QAAS,EAAQ,OAAO,AAC1B,EACF,GAGI,EAAO,MAAM,EAAS,IAAI,GAEhC,GAAI,EAAS,EAAE,CACb,OAAO,EAAK,IAAI,CAAC,EAAE,AAGnB,OADA,QAAQ,KAAK,CAAC,+BAAgC,GACxC,AAAI,MAAM,gCAEpB,CAEA,MAAM,EAAU,SAAS,cAAc,CAAC,WAExC,EAAQ,gBAAgB,CAAC,SAAU,eAAgB,CAAC,EAClD,EAAE,cAAc,GAGhB,IAAM,EAAU,CACd,MAAO,CAAC,EAAE,SAAS,cAAc,CAAC,WAAW,KAAK,CAAC,GAAG,EACpD,SAAS,cAAc,CAAC,aAAa,KAAK,CAC3C,CAAC,EAAE,SAAS,cAAc,CAAC,YAAY,KAAK,CAAC,CAAC,CAC/C,UAAW,SAAS,cAAc,CAAC,aAAa,KAAK,CACrD,SAAU,SAAS,cAAc,CAAC,YAAY,KAAK,CACnD,MAAO,SAAS,cAAc,CAAC,SAAS,KAAK,CAC7C,MAAO,SAAS,cAAc,CAAC,SAAS,KAAK,CAC7C,QAAS,SAAS,cAAc,CAAC,WAAW,KAAK,CACjD,KAAM,SAAS,cAAc,CAAC,QAAQ,KAAK,CAC3C,MAAO,SAAS,cAAc,CAAC,SAAS,KAAK,CAC7C,QAAS,SAAS,cAAc,CAAC,WAAW,KAAK,CACjD,KAAM,SAAS,cAAc,CAAC,QAAQ,KAAK,CAC3C,UAAW,SAAS,cAAc,CAAC,aAAa,KAAK,CACrD,UAAW,SAAS,cAAc,CAAC,aAAa,KAAK,CACrD,QAAS,SAAS,cAAc,CAAC,WAAW,KAAK,CACjD,eAAgB,SAAS,cAAc,CAAC,kBAAkB,KAAK,CAC/D,UAAW,SAAS,cAAc,CAAC,aAAa,KAAK,AACvD,EAEA,GAAI,CAEF,IAAM,EAAW,MAAM,EAAa,GAG9B,EAAQ,MAAM,EAAmB,GAEjC,EAAW,MAAM,MACrB,CAAC,6CAA6C,EAAE,EAAa,CAAC,CAC9D,CACE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CAAC,CACnB,MAAO,EAAQ,KAAK,CACpB,UAAW,EACX,OAAQ,EACR,WAAY,EACZ,SAAU,EAAQ,SAAS,CAAG,IAAM,EAAQ,SAAS,CACrD,cAAe,CACb,SAAU,EAAQ,OAAO,CACzB,WAAY,EAAQ,SAAS,CAC7B,gBAAiB,EAAQ,cAAc,CACvC,QAAS,EAAQ,OAAO,CACxB,KAAM,EAAQ,IAAI,CAClB,MAAO,EAAQ,KAAK,CACpB,SAAU,EAAQ,OAAO,CACzB,KAAM,EAAQ,IAAI,CAClB,WAAY,EAAQ,SAAS,CAC7B,WAAY,EAAQ,SAAS,CAC7B,SAAU,EAAQ,OAAO,AAC3B,CACF,EACF,GAGI,EAAO,MAAM,EAAS,IAAI,EAE5B,CAAA,EAAS,EAAE,EACb,MAAM,6BACN,EAAQ,KAAK,KAEb,QAAQ,KAAK,CAAC,SAAU,GACxB,MAAM,uBAEV,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,SAAU,GACxB,MAAM,sBACR,CACF","sources":["<anon>","script.js"],"sourcesContent":["const YOUR_API_KEY = \"727dc9655ddaf6548fcba0d55b7b9eabb68e23b1\";\nasync function createPerson(jobData) {\n    const response = await fetch(`https://api.pipedrive.com/v1/persons?api_token=${YOUR_API_KEY}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            name: `${jobData.firstName} ${jobData.lastName}`,\n            phone: jobData.phone,\n            email: jobData.email\n        })\n    });\n    const data = await response.json();\n    if (response.ok) return data.data.id; // person_id\n    else {\n        console.error(\"Error creating person:\", data);\n        throw new Error(\"Could not create person\");\n    }\n}\nasync function createOrganization(jobData) {\n    const response = await fetch(`https://api.pipedrive.com/v1/organizations?api_token=${YOUR_API_KEY}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            name: jobData.address,\n            address: jobData.address\n        })\n    });\n    const data = await response.json();\n    if (response.ok) return data.data.id; // org_id\n    else {\n        console.error(\"Error creating organization:\", data);\n        throw new Error(\"Could not create organization\");\n    }\n}\nconst jobForm = document.getElementById(\"jobForm\");\njobForm.addEventListener(\"submit\", async function(e) {\n    e.preventDefault();\n    // Gather input data\n    const jobData = {\n        title: `${document.getElementById(\"jobType\").value} - ${document.getElementById(\"firstName\").value} ${document.getElementById(\"lastName\").value}`,\n        firstName: document.getElementById(\"firstName\").value,\n        lastName: document.getElementById(\"lastName\").value,\n        phone: document.getElementById(\"phone\").value,\n        email: document.getElementById(\"email\").value,\n        address: document.getElementById(\"address\").value,\n        city: document.getElementById(\"city\").value,\n        state: document.getElementById(\"state\").value,\n        zipCode: document.getElementById(\"zipCode\").value,\n        area: document.getElementById(\"area\").value,\n        startDate: document.getElementById(\"startDate\").value,\n        startTime: document.getElementById(\"startTime\").value,\n        endTime: document.getElementById(\"endTime\").value,\n        jobDescription: document.getElementById(\"jobDescription\").value,\n        jobSource: document.getElementById(\"jobSource\").value\n    };\n    try {\n        // Create a new person and get the person_id\n        const personId = await createPerson(jobData);\n        // Optional: Create a new organization and get the org_id\n        const orgId = await createOrganization(jobData);\n        const response = await fetch(`https://api.pipedrive.com/v1/deals?api_token=${YOUR_API_KEY}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                title: jobData.title,\n                person_id: personId,\n                org_id: orgId,\n                visible_to: 1,\n                add_time: jobData.startDate + \" \" + jobData.startTime,\n                custom_fields: {\n                    job_type: jobData.jobType,\n                    job_source: jobData.jobSource,\n                    job_description: jobData.jobDescription,\n                    address: jobData.address,\n                    city: jobData.city,\n                    state: jobData.state,\n                    zip_code: jobData.zipCode,\n                    area: jobData.area,\n                    start_date: jobData.startDate,\n                    start_time: jobData.startTime,\n                    end_time: jobData.endTime\n                }\n            })\n        });\n        const data = await response.json();\n        if (response.ok) {\n            alert(\"Job created successfully!\");\n            jobForm.reset(); // Clear form fields\n        } else {\n            console.error(\"Error:\", data);\n            alert(\"Error creating job.\");\n        }\n    } catch (error) {\n        console.error(\"Error:\", error);\n        alert(\"Error creating job.\");\n    }\n});\n\n//# sourceMappingURL=index.ef8c136c.js.map\n","const YOUR_API_KEY = \"727dc9655ddaf6548fcba0d55b7b9eabb68e23b1\";\r\n\r\nasync function createPerson(jobData) {\r\n  const response = await fetch(\r\n    `https://api.pipedrive.com/v1/persons?api_token=${YOUR_API_KEY}`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: `${jobData.firstName} ${jobData.lastName}`,\r\n        phone: jobData.phone,\r\n        email: jobData.email,\r\n      }),\r\n    }\r\n  );\r\n\r\n  const data = await response.json();\r\n\r\n  if (response.ok) {\r\n    return data.data.id; // person_id\r\n  } else {\r\n    console.error(\"Error creating person:\", data);\r\n    throw new Error(\"Could not create person\");\r\n  }\r\n}\r\nasync function createOrganization(jobData) {\r\n  const response = await fetch(\r\n    `https://api.pipedrive.com/v1/organizations?api_token=${YOUR_API_KEY}`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: jobData.address, // or any other relevant data\r\n        address: jobData.address,\r\n      }),\r\n    }\r\n  );\r\n\r\n  const data = await response.json();\r\n\r\n  if (response.ok) {\r\n    return data.data.id; // org_id\r\n  } else {\r\n    console.error(\"Error creating organization:\", data);\r\n    throw new Error(\"Could not create organization\");\r\n  }\r\n}\r\n\r\nconst jobForm = document.getElementById(\"jobForm\");\r\n\r\njobForm.addEventListener(\"submit\", async function (e) {\r\n  e.preventDefault();\r\n\r\n  // Gather input data\r\n  const jobData = {\r\n    title: `${document.getElementById(\"jobType\").value} - ${\r\n      document.getElementById(\"firstName\").value\r\n    } ${document.getElementById(\"lastName\").value}`,\r\n    firstName: document.getElementById(\"firstName\").value,\r\n    lastName: document.getElementById(\"lastName\").value,\r\n    phone: document.getElementById(\"phone\").value,\r\n    email: document.getElementById(\"email\").value,\r\n    address: document.getElementById(\"address\").value,\r\n    city: document.getElementById(\"city\").value,\r\n    state: document.getElementById(\"state\").value,\r\n    zipCode: document.getElementById(\"zipCode\").value,\r\n    area: document.getElementById(\"area\").value,\r\n    startDate: document.getElementById(\"startDate\").value,\r\n    startTime: document.getElementById(\"startTime\").value,\r\n    endTime: document.getElementById(\"endTime\").value,\r\n    jobDescription: document.getElementById(\"jobDescription\").value,\r\n    jobSource: document.getElementById(\"jobSource\").value,\r\n  };\r\n\r\n  try {\r\n    // Create a new person and get the person_id\r\n    const personId = await createPerson(jobData);\r\n\r\n    // Optional: Create a new organization and get the org_id\r\n    const orgId = await createOrganization(jobData);\r\n\r\n    const response = await fetch(\r\n      `https://api.pipedrive.com/v1/deals?api_token=${YOUR_API_KEY}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: jobData.title,\r\n          person_id: personId, // Use the created person_id\r\n          org_id: orgId, // Use the created org_id\r\n          visible_to: 1,\r\n          add_time: jobData.startDate + \" \" + jobData.startTime,\r\n          custom_fields: {\r\n            job_type: jobData.jobType,\r\n            job_source: jobData.jobSource,\r\n            job_description: jobData.jobDescription,\r\n            address: jobData.address,\r\n            city: jobData.city,\r\n            state: jobData.state,\r\n            zip_code: jobData.zipCode,\r\n            area: jobData.area,\r\n            start_date: jobData.startDate,\r\n            start_time: jobData.startTime,\r\n            end_time: jobData.endTime,\r\n          },\r\n        }),\r\n      }\r\n    );\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      alert(\"Job created successfully!\");\r\n      jobForm.reset(); // Clear form fields\r\n    } else {\r\n      console.error(\"Error:\", data);\r\n      alert(\"Error creating job.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error:\", error);\r\n    alert(\"Error creating job.\");\r\n  }\r\n});\r\n"],"names":["YOUR_API_KEY","createPerson","jobData","response","fetch","method","headers","body","JSON","stringify","name","firstName","lastName","phone","email","data","json","ok","id","console","error","Error","createOrganization","address","jobForm","document","getElementById","addEventListener","e","preventDefault","title","value","city","state","zipCode","area","startDate","startTime","endTime","jobDescription","jobSource","personId","orgId","person_id","org_id","visible_to","add_time","custom_fields","job_type","jobType","job_source","job_description","zip_code","start_date","start_time","end_time","alert","reset"],"version":3,"file":"index.ef8c136c.js.map"}