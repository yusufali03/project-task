{"mappings":"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","sources":["script.js"],"sourcesContent":["const YOUR_API_KEY = \"727dc9655ddaf6548fcba0d55b7b9eabb68e23b1\";\r\n\r\nasync function createPerson(jobData) {\r\n  const response = await fetch(\r\n    `https://api.pipedrive.com/v1/persons?api_token=${YOUR_API_KEY}`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: `${jobData.firstName} ${jobData.lastName}`,\r\n        phone: jobData.phone,\r\n        email: jobData.email,\r\n      }),\r\n    }\r\n  );\r\n\r\n  const data = await response.json();\r\n\r\n  if (response.ok) {\r\n    return data.data.id; // person_id\r\n  } else {\r\n    console.error(\"Error creating person:\", data);\r\n    throw new Error(\"Could not create person\");\r\n  }\r\n}\r\nasync function createOrganization(jobData) {\r\n  const response = await fetch(\r\n    `https://api.pipedrive.com/v1/organizations?api_token=${YOUR_API_KEY}`,\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: jobData.address, // or any other relevant data\r\n        address: jobData.address,\r\n      }),\r\n    }\r\n  );\r\n\r\n  const data = await response.json();\r\n\r\n  if (response.ok) {\r\n    return data.data.id; // org_id\r\n  } else {\r\n    console.error(\"Error creating organization:\", data);\r\n    throw new Error(\"Could not create organization\");\r\n  }\r\n}\r\n\r\nconst jobForm = document.getElementById(\"jobForm\");\r\n\r\njobForm.addEventListener(\"submit\", async function (e) {\r\n  e.preventDefault();\r\n\r\n  // Gather input data\r\n  const jobData = {\r\n    title: `${document.getElementById(\"jobType\").value} - ${\r\n      document.getElementById(\"firstName\").value\r\n    } ${document.getElementById(\"lastName\").value}`,\r\n    firstName: document.getElementById(\"firstName\").value,\r\n    lastName: document.getElementById(\"lastName\").value,\r\n    phone: document.getElementById(\"phone\").value,\r\n    email: document.getElementById(\"email\").value,\r\n    address: document.getElementById(\"address\").value,\r\n    city: document.getElementById(\"city\").value,\r\n    state: document.getElementById(\"state\").value,\r\n    zipCode: document.getElementById(\"zipCode\").value,\r\n    area: document.getElementById(\"area\").value,\r\n    startDate: document.getElementById(\"startDate\").value,\r\n    startTime: document.getElementById(\"startTime\").value,\r\n    endTime: document.getElementById(\"endTime\").value,\r\n    jobDescription: document.getElementById(\"jobDescription\").value,\r\n    jobSource: document.getElementById(\"jobSource\").value,\r\n  };\r\n\r\n  try {\r\n    // Create a new person and get the person_id\r\n    const personId = await createPerson(jobData);\r\n\r\n    // Optional: Create a new organization and get the org_id\r\n    const orgId = await createOrganization(jobData);\r\n\r\n    const response = await fetch(\r\n      `https://api.pipedrive.com/v1/deals?api_token=${YOUR_API_KEY}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: jobData.title,\r\n          person_id: personId, // Use the created person_id\r\n          org_id: orgId, // Use the created org_id\r\n          visible_to: 1,\r\n          add_time: jobData.startDate + \" \" + jobData.startTime,\r\n          custom_fields: {\r\n            job_type: jobData.jobType,\r\n            job_source: jobData.jobSource,\r\n            job_description: jobData.jobDescription,\r\n            address: jobData.address,\r\n            city: jobData.city,\r\n            state: jobData.state,\r\n            zip_code: jobData.zipCode,\r\n            area: jobData.area,\r\n            start_date: jobData.startDate,\r\n            start_time: jobData.startTime,\r\n            end_time: jobData.endTime,\r\n          },\r\n        }),\r\n      }\r\n    );\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      alert(\"Job created successfully!\");\r\n      jobForm.reset(); // Clear form fields\r\n    } else {\r\n      console.error(\"Error:\", data);\r\n      alert(\"Error creating job.\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error:\", error);\r\n    alert(\"Error creating job.\");\r\n  }\r\n});\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}